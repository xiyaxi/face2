<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
	http://www.springframework.org/schema/jdbc 
	http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


	<!-- 扫描带有元注解的包中的类，相等于声明了许多的Bean对象 -->
	<context:component-scan base-package="com.xixi.t1" />

	<!-- 启用事务的元注解 -->
	<tx:annotation-driven />
	
	<!-- 启用MVC源注解配置 -->
	<mvc:annotation-driven />
	

	<!-- 1. 配置数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<property name="url">
			<value>jdbc:mysql://localhost:3306/ks</value>
		</property>
		<property name="username">
			<value>root</value>
		</property>
		<property name="password">
			<value>1234</value>
		</property>
	</bean>

	<!-- 2. 配置事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean> 
	
	<!-- 2. 配置事务管理 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->

	<!-- 声明事务管理特性 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		
	</tx:advice> -->
	<!-- 视图解析 -->
	<!-- <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		返回的视图模型数据需要经过jstl来处理 <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
		/> 路径的前缀 <property name="prefix" value="/WEB-INF/" /> 页面的后缀 <property name="suffix" 
		value=".jsp" /> </bean> -->

	<!-- 忽略静态资源:由tomcat按默认方式处理精态资源，不同过springmvc框架 -->
	<mvc:default-servlet-handler />

	<!-- 5. 配置mybitasSqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置别名路径 -->
		<property name="typeAliasesPackage" value="com.xixi.t1.entity"></property>
	</bean>
	<!-- 6. 自动扫描所有的Dao[Mapper](和xml映射文件) ,自动创建所有的dao的实现类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xixi.t1.mapper"></property>
	</bean>

	<!-- 1.定义任务 -->
	<!-- <bean name="myjob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
		<property name="targetClass" value="com.accp.yuntiku.service.BookService"></property> 
		<property name="targetObject" ref="bookService"></property> <property name="targetMethod" 
		value="delete"></property> </bean> 2.配置trigger定时器 <bean name="cronTrigger" 
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 指定任务 
		<property name="jobDetail" ref="myjob"></property> 指定cron表达式 <property name="cronExpression" 
		value="1/3 * * * * ? *"></property> </bean> 3.配置schedule计划 <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
		配置触发器 <property name="triggers"> <list> <ref bean="cronTrigger" /> </list> 
		</property> </bean> -->

	<!-- 跨域访问 -->
	<!-- <mvc:cors> <mvc:mapping path="/**" allowed-origins="*" allow-credentials="true" 
		max-age="12000" allowed-methods="GET,POST,PUT,*"/> </mvc:cors> -->
</beans>